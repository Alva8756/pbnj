// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MachineClient is the client API for Machine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MachineClient interface {
	BootDevice(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error)
	Power(ctx context.Context, in *PowerRequest, opts ...grpc.CallOption) (*PowerResponse, error)
}

type machineClient struct {
	cc grpc.ClientConnInterface
}

func NewMachineClient(cc grpc.ClientConnInterface) MachineClient {
	return &machineClient{cc}
}

var machineBootDeviceStreamDesc = &grpc.StreamDesc{
	StreamName: "BootDevice",
}

func (c *machineClient) BootDevice(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error) {
	out := new(DeviceResponse)
	err := c.cc.Invoke(ctx, "/github.com.tinkerbell.pbnj.api.proto.v1.Machine/BootDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var machinePowerStreamDesc = &grpc.StreamDesc{
	StreamName: "Power",
}

func (c *machineClient) Power(ctx context.Context, in *PowerRequest, opts ...grpc.CallOption) (*PowerResponse, error) {
	out := new(PowerResponse)
	err := c.cc.Invoke(ctx, "/github.com.tinkerbell.pbnj.api.proto.v1.Machine/Power", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MachineService is the service API for Machine service.
// Fields should be assigned to their respective handler implementations only before
// RegisterMachineService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type MachineService struct {
	BootDevice func(context.Context, *DeviceRequest) (*DeviceResponse, error)
	Power      func(context.Context, *PowerRequest) (*PowerResponse, error)
}

func (s *MachineService) bootDevice(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.BootDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/github.com.tinkerbell.pbnj.api.proto.v1.Machine/BootDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.BootDevice(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *MachineService) power(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Power(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/github.com.tinkerbell.pbnj.api.proto.v1.Machine/Power",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Power(ctx, req.(*PowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterMachineService registers a service implementation with a gRPC server.
func RegisterMachineService(s grpc.ServiceRegistrar, srv *MachineService) {
	srvCopy := *srv
	if srvCopy.BootDevice == nil {
		srvCopy.BootDevice = func(context.Context, *DeviceRequest) (*DeviceResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method BootDevice not implemented")
		}
	}
	if srvCopy.Power == nil {
		srvCopy.Power = func(context.Context, *PowerRequest) (*PowerResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Power not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "github.com.tinkerbell.pbnj.api.proto.v1.Machine",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "BootDevice",
				Handler:    srvCopy.bootDevice,
			},
			{
				MethodName: "Power",
				Handler:    srvCopy.power,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "api/proto/v1/machine.proto",
	}

	s.RegisterService(&sd, nil)
}
