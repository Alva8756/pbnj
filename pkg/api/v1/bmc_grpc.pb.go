// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BMCClient is the client API for BMC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BMCClient interface {
	NetworkSource(ctx context.Context, in *NetworkSourceRequest, opts ...grpc.CallOption) (*NetworkSourceResponse, error)
	Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error)
}

type bMCClient struct {
	cc grpc.ClientConnInterface
}

func NewBMCClient(cc grpc.ClientConnInterface) BMCClient {
	return &bMCClient{cc}
}

var bMCNetworkSourceStreamDesc = &grpc.StreamDesc{
	StreamName: "NetworkSource",
}

func (c *bMCClient) NetworkSource(ctx context.Context, in *NetworkSourceRequest, opts ...grpc.CallOption) (*NetworkSourceResponse, error) {
	out := new(NetworkSourceResponse)
	err := c.cc.Invoke(ctx, "/github.com.tinkerbell.pbnj.api.proto.v1.BMC/NetworkSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var bMCResetStreamDesc = &grpc.StreamDesc{
	StreamName: "Reset",
}

func (c *bMCClient) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error) {
	out := new(ResetResponse)
	err := c.cc.Invoke(ctx, "/github.com.tinkerbell.pbnj.api.proto.v1.BMC/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BMCService is the service API for BMC service.
// Fields should be assigned to their respective handler implementations only before
// RegisterBMCService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type BMCService struct {
	NetworkSource func(context.Context, *NetworkSourceRequest) (*NetworkSourceResponse, error)
	Reset         func(context.Context, *ResetRequest) (*ResetResponse, error)
}

func (s *BMCService) networkSource(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.NetworkSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/github.com.tinkerbell.pbnj.api.proto.v1.BMC/NetworkSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.NetworkSource(ctx, req.(*NetworkSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *BMCService) reset(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/github.com.tinkerbell.pbnj.api.proto.v1.BMC/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Reset(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterBMCService registers a service implementation with a gRPC server.
func RegisterBMCService(s grpc.ServiceRegistrar, srv *BMCService) {
	srvCopy := *srv
	if srvCopy.NetworkSource == nil {
		srvCopy.NetworkSource = func(context.Context, *NetworkSourceRequest) (*NetworkSourceResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method NetworkSource not implemented")
		}
	}
	if srvCopy.Reset == nil {
		srvCopy.Reset = func(context.Context, *ResetRequest) (*ResetResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "github.com.tinkerbell.pbnj.api.proto.v1.BMC",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "NetworkSource",
				Handler:    srvCopy.networkSource,
			},
			{
				MethodName: "Reset",
				Handler:    srvCopy.reset,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "api/proto/v1/bmc.proto",
	}

	s.RegisterService(&sd, nil)
}
