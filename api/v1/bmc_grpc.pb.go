// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BMCClient is the client API for BMC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BMCClient interface {
	NetworkSource(ctx context.Context, in *NetworkSourceRequest, opts ...grpc.CallOption) (*NetworkSourceResponse, error)
	Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error)
}

type bMCClient struct {
	cc grpc.ClientConnInterface
}

func NewBMCClient(cc grpc.ClientConnInterface) BMCClient {
	return &bMCClient{cc}
}

func (c *bMCClient) NetworkSource(ctx context.Context, in *NetworkSourceRequest, opts ...grpc.CallOption) (*NetworkSourceResponse, error) {
	out := new(NetworkSourceResponse)
	err := c.cc.Invoke(ctx, "/github.com.tinkerbell.pbnj.api.v1.BMC/NetworkSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bMCClient) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error) {
	out := new(ResetResponse)
	err := c.cc.Invoke(ctx, "/github.com.tinkerbell.pbnj.api.v1.BMC/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BMCServer is the server API for BMC service.
// All implementations must embed UnimplementedBMCServer
// for forward compatibility
type BMCServer interface {
	NetworkSource(context.Context, *NetworkSourceRequest) (*NetworkSourceResponse, error)
	Reset(context.Context, *ResetRequest) (*ResetResponse, error)
	mustEmbedUnimplementedBMCServer()
}

// UnimplementedBMCServer must be embedded to have forward compatible implementations.
type UnimplementedBMCServer struct {
}

func (UnimplementedBMCServer) NetworkSource(context.Context, *NetworkSourceRequest) (*NetworkSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkSource not implemented")
}
func (UnimplementedBMCServer) Reset(context.Context, *ResetRequest) (*ResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedBMCServer) mustEmbedUnimplementedBMCServer() {}

// UnsafeBMCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BMCServer will
// result in compilation errors.
type UnsafeBMCServer interface {
	mustEmbedUnimplementedBMCServer()
}

func RegisterBMCServer(s grpc.ServiceRegistrar, srv BMCServer) {
	s.RegisterService(&_BMC_serviceDesc, srv)
}

func _BMC_NetworkSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BMCServer).NetworkSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.tinkerbell.pbnj.api.v1.BMC/NetworkSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BMCServer).NetworkSource(ctx, req.(*NetworkSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BMC_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BMCServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.tinkerbell.pbnj.api.v1.BMC/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BMCServer).Reset(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BMC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.tinkerbell.pbnj.api.v1.BMC",
	HandlerType: (*BMCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NetworkSource",
			Handler:    _BMC_NetworkSource_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _BMC_Reset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/bmc.proto",
}
